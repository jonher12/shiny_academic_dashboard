import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
import requests
from io import BytesIO
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

st.set_page_config(page_title="Dashboard Estudiantil", layout="wide")

@st.cache_data
def load_data_from_gdrive(file_id: str) -> pd.DataFrame:
    url = f"https://drive.google.com/uc?id={file_id}&export=download"
    response = requests.get(url)
    if response.status_code == 200:
        return pd.read_csv(BytesIO(response.content), encoding="latin1")
    else:
        st.error(f"Error al descargar archivo: {response.status_code}")
        return pd.DataFrame()

FILE_ID = st.secrets["FILE_ID"]
df = load_data_from_gdrive(FILE_ID)

# === VARIABLES ===
demograficas = [
    "Nombre", "N√∫mero de Estudiante", "Email UPR", "Procedencia", "N√∫mero de Expediente",
    "1st Fall Enrollment", "√çndice General", "√çndice Cient√≠fico", "PCAT"
]

cursos_requeridos = [
    "Espa√±ol B√°sico Nota 1", "Espa√±ol B√°sico Nota 2",
    "Ingl√©s B√°sico Nota 1", "Ingl√©s B√°sico Nota 2",
    "Ciencias Sociales Nota 1", "Ciencias Sociales Nota 2",
    "Introducci√≥n al Estudio de la Cultura de Occidente Nota 1", "Introducci√≥n al Estudio de la Cultura de Occidente Nota 2",
    "Econom√≠a Nota 1", "Econom√≠a Nota 2", "Psicolog√≠a Nota 1", "Idioma (Ingl√©s o Espa√±ol) Nota 1",
    "Biolog√≠a General Nota 1", "Biolog√≠a General Nota 2", "Biolog√≠a General Nota 3", "Biolog√≠a General Nota 4",
    "Biolog√≠a General (D)", "Qu√≠mica General Nota 1", "Qu√≠mica General Nota 2", "Qu√≠mica General Nota 3",
    "Qu√≠mica General Nota 4", "Qu√≠mica General (D)", "Qu√≠mica Org√°nica Nota 1", "Qu√≠mica Org√°nica Nota 2",
    "Qu√≠mica Org√°nica Nota 3", "Qu√≠mica Org√°nica Nota 4", "Qu√≠mica Org√°nica (W)", "Qu√≠mica Org√°nica (D)", "Qu√≠mica Org√°nica (F)",
    "Matem√°tica - Pre-C√°lculo Nota 1", "Matem√°tica - Pre-C√°lculo Nota 2", "Matem√°tica - Pre-C√°lculo (D)", "Matem√°tica - Pre-C√°lculo (F)",
    "C√°lculo I Nota 1", "C√°lculo I Nota 2", "C√°lculo I (D)", "C√°lculo I (F)",
    "F√≠sica General Nota 1", "F√≠sica General Nota 2", "F√≠sica General Nota 3", "F√≠sica General Nota 4",
    "F√≠sica General (D)", "F√≠sica General (F)", "Lab. F√≠sica General Nota 1", "Lab. F√≠sica General Nota 2",
    "An. y Fisiolog√≠a Nota 1", "An. y Fisiolog√≠a Nota 2", "An. y Fisiolog√≠a Nota 3", "An. y Fisiolog√≠a Nota 4"
]

categoricas = ["1st Fall Enrollment"] + cursos_requeridos
continuas = ["√çndice General", "√çndice Cient√≠fico", "PCAT"]
notas_letra = cursos_requeridos
nota_map = {'A': 4, 'B': 3, 'C': 2, 'D': 1, 'F': 0}
df[notas_letra] = df[notas_letra].apply(lambda col: col.map(lambda x: nota_map.get(str(x).strip().upper(), np.nan)))

# === SIDEBAR ===
def reset_defaults():
    st.session_state.col_cat = "1st Fall Enrollment"
    st.session_state.valor_filtro = "All Enrollment"
    st.session_state.procedencia = "Todas"
    st.session_state.col_x = "√çndice General"
    st.session_state.col_y = "√çndice Cient√≠fico"
    st.session_state.slider = (float(df["√çndice General"].min()), float(df["√çndice General"].max()))

with st.sidebar:
    st.header("üéöÔ∏è Filtros")

    if st.button("üîÑ Resetear filtros"):
        reset_defaults()

    col_cat = st.selectbox("Filtrar por categor√≠a", categoricas, key="col_cat")
    valores_cat = sorted(df[col_cat].dropna().apply(lambda x: str(x).strip()).unique())
    if col_cat == "1st Fall Enrollment":
        valores_cat = ["All Enrollment"] + valores_cat
    valor_filtro = st.selectbox(f"Valor en '{col_cat}'", valores_cat, index=0 if "valor_filtro" not in st.session_state else valores_cat.index(st.session_state.valor_filtro), key="valor_filtro")

    procedencias = sorted(df["Procedencia"].dropna().apply(lambda x: str(x).strip()).unique())
    selected_procedencia = st.selectbox("Procedencia", ["Todas"] + procedencias, index=0 if "procedencia" not in st.session_state else (["Todas"] + procedencias).index(st.session_state.procedencia), key="procedencia")

    col_x = st.selectbox("Variable continua (eje X)", continuas, key="col_x")
    y_options = [col for col in continuas if col != col_x]
    col_y = st.selectbox("Variable continua (eje Y)", y_options, key="col_y")

    if col_x:
        min_val = float(df[col_x].min())
        max_val = float(df[col_x].max())
        slider_step = 1.0 if col_x == "PCAT" else 0.1
        selected_range = st.slider(
            f"Rango de '{col_x}'",
            min_value=min_val,
            max_value=max_val,
            value=st.session_state.get("slider", (min_val, max_val)),
            step=slider_step,
            key="slider"
        )
    else:
        selected_range = (None, None)

# (rest of the code remains unchanged)
